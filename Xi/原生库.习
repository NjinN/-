#包含 "习语言系统.接口"


令牌 *执行原生函数(作业线 *线){
	
	令牌 令;
	/*
	格式输出("栈首令牌字面值为%串\n", (*线).栈[0].值空间.字面值);
	格式输出("操作数1类型为%整\n", (*线).栈[1].类型);
	格式输出("操作数1类型为%串\n", 取字面值((*线).栈 + 1));
	格式输出("操作数2类型为%整\n", (*线).栈[2].类型);
	格式输出("操作数2数值为%双\n", (*线).栈[2].值空间.浮点);
	*/
	如果((字符串比较((*线).栈[0].值空间.字面值, "add") 等于 0) 或 (字符串比较((*线).栈[0].值空间.字面值, "加") 等于 0)){
		如果(((*线).栈[1].类型 等于 _整数) 并且 ((*线).栈[2].类型 等于 _整数)){
			令.类型 = _整数;
			令.值空间.数字 = (*线).栈[1].值空间.数字 + (*线).栈[2].值空间.数字;
			令.境 = (*线).栈[1].境;
			令.句长 = 1;
		}否则{
			令.类型 = _小数;
			令.境 = (*线).栈[1].境;
			令.句长 = 1;	
			如果((*线).栈[1].类型 等于 _整数){
				令.值空间.浮点 = (双精度类型)(*线).栈[1].值空间.数字;
			}否则{
				令.值空间.浮点 = (*线).栈[1].值空间.浮点;
			}
			如果((*线).栈[2].类型 等于 _整数){
				令.值空间.浮点 += (双精度类型)(*线).栈[2].值空间.数字;
			}否则{
				令.值空间.浮点 += (*线).栈[2].值空间.浮点;
			}
				
		}
			
	}	
	
	如果((字符串比较((*线).栈[0].值空间.字面值, "sub") 等于 0) 或 (字符串比较((*线).栈[0].值空间.字面值, "减") 等于 0)){
		如果(((*线).栈[1].类型 等于 _整数) 并且 ((*线).栈[2].类型 等于 _整数)){
			令.类型 = _整数;
			令.值空间.数字 = (*线).栈[1].值空间.数字 - (*线).栈[2].值空间.数字;
			令.境 = (*线).栈[1].境;
			令.句长 = 1;
		}否则{
			令.类型 = _小数;
			令.境 = (*线).栈[1].境;
			令.句长 = 1;	
			如果((*线).栈[1].类型 等于 _整数){
				令.值空间.浮点 = (双精度类型)(*线).栈[1].值空间.数字;	
			}否则{
				令.值空间.浮点 = (*线).栈[1].值空间.浮点;	
			}
			如果((*线).栈[2].类型 等于 _整数){
				令.值空间.浮点 -= (双精度类型)(*线).栈[2].值空间.数字;
			}否则{
				令.值空间.浮点 -= (*线).栈[2].值空间.浮点;
			}	
		}
			
	}
	
	如果((字符串比较((*线).栈[0].值空间.字面值, "mul") 等于 0) 或 (字符串比较((*线).栈[0].值空间.字面值, "乘") 等于 0)){
		如果(((*线).栈[1].类型 等于 _整数) 并且 ((*线).栈[2].类型 等于 _整数)){
			令.类型 = _整数;
			令.值空间.数字 = (*线).栈[1].值空间.数字 * (*线).栈[2].值空间.数字;
			令.境 = (*线).栈[1].境;
			令.句长 = 1;
		}否则{
			令.类型 = _小数;
			令.境 = (*线).栈[1].境;
			令.句长 = 1;	
			如果((*线).栈[1].类型 等于 _整数){
				令.值空间.浮点 = (双精度类型)(*线).栈[1].值空间.数字;	
			}否则{
				令.值空间.浮点 = (*线).栈[1].值空间.浮点;	
			}
			如果((*线).栈[2].类型 等于 _整数){
				令.值空间.浮点 *= (双精度类型)(*线).栈[2].值空间.数字;
			}否则{
				令.值空间.浮点 *= (*线).栈[2].值空间.浮点;
			}	
		}
			
	}
	
	如果((字符串比较((*线).栈[0].值空间.字面值, "div") 等于 0) 或 (字符串比较((*线).栈[0].值空间.字面值, "除") 等于 0)){
		如果(((*线).栈[1].类型 等于 _整数) 并且 ((*线).栈[2].类型 等于 _整数)){
			令.类型 = _小数;
			令.值空间.浮点 = (双精度类型)(*线).栈[1].值空间.数字 / (双精度类型)(*线).栈[2].值空间.数字;
			令.境 = (*线).栈[1].境;
			令.句长 = 1;
		}否则{
			令.类型 = _小数;
			令.境 = (*线).栈[1].境;
			令.句长 = 1;	
			如果((*线).栈[1].类型 等于 _整数){
				令.值空间.浮点 = (双精度类型)(*线).栈[1].值空间.数字;	
			}否则{
				令.值空间.浮点 = (*线).栈[1].值空间.浮点;	
			}
			如果((*线).栈[2].类型 等于 _整数){
				令.值空间.浮点 /= (双精度类型)(*线).栈[2].值空间.数字;
			}否则{
				令.值空间.浮点 /= (*线).栈[2].值空间.浮点;
			}	
		}
			
	}
	
	
	
	返回 &令;
}





















