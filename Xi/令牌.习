#包含 "习语言系统.接口"


#定义	_空		1
#定义	_单字	2
#定义	_原字	3


#定义	_整数	101
#定义	_小数	102
#定义	_字符	103
#定义	_字符串	104
		


#定义	_设字	-1
#定义	_取字	-2
#定义	_原生函数	-3
#定义	_函数	-4
#定义	_中缀	-5	





类型定义 结构类型	容器;

类型定义 结构类型 令牌 {
	短整数		类型;
	联合类型 	值类型 {
		字节		字母;
		汉字类型	汉字;
		整数 		数字;
		字符		*字面值;
		长整数		大数;
		双精度		浮点;
		字符		*字符串;
		整数		整数列[4];
		长整数		长整数列[2];
		小数		浮点列[2];
		令牌		*令牌;
	} 值空间;
	结构类型	容器	*境;
	自然数		句长;
	自然数		行号;
};


字符 *取字面值(令牌 *令){

	如果(令 等于 空指针){
		返回 "空";	
	}
	
	如果((*令).类型 等于 _空){
		返回 "空";
	}
	
	如果((*令).类型 等于 _单字){
		返回 字符串克隆((*令).值空间.字面值, 0, 0);	
	}
	
	如果((*令).类型 等于 _原字){
		字符 *字面值 = 内存申请并清零(字符串长度((*令).值空间.字面值) + 2);
		字符串连接(字面值, "'");
		返回 字符串连接(字面值, (*令).值空间.字面值);	
	}
	
	如果((*令).类型 等于 _整数){
		字符 *字面值 = 内存申请并清零(16);
		返回 整数转字符串((*令).值空间.数字, 字面值, 15, 10 );	
	}
	
	如果((*令).类型 等于 _小数){
		//字符 *字面值 = 内存申请并清零(16);
		//返回 浮点数转字符串((*令).值空间.浮点, 字面值, 15, 10 );
		返回 字符串克隆((*令).值空间.字面值, 0, 0);	
	}
	
	如果((*令).类型 等于 _字符){
		字符 *字面值 = 内存申请并清零(16);
		字符串连接(字面值, "#(");
		字符串连接(字面值, (*令).值空间.字面值);
		返回 字符串连接(字面值, ")");
	}
	
	如果((*令).类型 等于 _字符串){
		返回 字符串克隆((*令).值空间.字面值, 0, 0);
	}	
	
	如果((*令).类型 等于 _设字){
		字符 *字面值 = 内存申请并清零(字符串长度((*令).值空间.字面值) + 2);
		字符串连接(字面值, (*令).值空间.字面值);
		返回 字符串连接(字面值, ":");	
	}
	
	如果((*令).类型 等于 _取字){
		字符 *字面值 = 内存申请并清零(字符串长度((*令).值空间.字面值) + 2);
		字符串连接(字面值, ":");
		返回 字符串连接(字面值, (*令).值空间.字面值);	
	}
	
	如果((*令).类型 等于 _原生函数){
		返回 字符串克隆((*令).值空间.字面值, 0, 0);
	}
}


// 测试
/*
整数类型 主函数( ){ 
	令牌 测试令牌;
	测试令牌.类型 = 0;
	测试令牌.值空间.字面值 = “字面值”;
	输出字符串并换行(测试令牌.值空间.字面值);
	
	测试令牌.值空间.数字 = 10;
	输出整数(测试令牌.值空间.数字, 2);
	
	暂停();
	返回 0;	
};
*/

	

